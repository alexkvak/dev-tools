// Generated by CoffeeScript 1.6.3
/*
Build worker process main script.
*/

var BuildWorker, CompileCoffeeScript, CompileStylus, CompileWidgetTemplate, CopyFile, Fake, util, worker, _;

util = require('util');

_ = require('underscore');

CompileCoffeeScript = require('./task/CompileCoffeeScript');

CompileStylus = require('./task/CompileStylus');

CompileWidgetTemplate = require('./task/CompileWidgetTemplate');

Fake = require('./task/Fake');

CopyFile = require('./task/CopyFile');

BuildWorker = (function() {
  BuildWorker.prototype.tasks = null;

  function BuildWorker() {
    this.tasks = {};
  }

  BuildWorker.prototype.addTask = function(taskParams) {
    /*
    Registers and launches new task based on the given params
    @param Object taskParams
    @return Future[Nothing]
    */

    var TaskClass, task,
      _this = this;
    TaskClass = this._chooseTask(taskParams);
    task = this.tasks[taskParams.id] = new TaskClass(taskParams);
    task.run();
    util.log(">>> " + taskParams.file + "...");
    return task.ready().andThen(function() {
      return delete _this.tasks[taskParams.id];
    });
  };

  BuildWorker.prototype._chooseTask = function(taskParams) {
    /*
    Selects task class by task params
    @return Class
    */

    var info;
    info = taskParams.info;
    if (info.isCoffee) {
      return CompileCoffeeScript;
    } else if (info.isStylus) {
      return CompileStylus;
    } else if (info.isWidgetTemplate) {
      return CompileWidgetTemplate;
    } else if (info.ext === '.orig' || info.ext.substr(-1) === '~') {
      return Fake;
    } else {
      return CopyFile;
    }
  };

  return BuildWorker;

})();

worker = new BuildWorker;

process.on('message', function(task) {
  return worker.addTask(task).done(function() {
    return process.send({
      type: 'completed',
      task: task.id
    });
  }).fail(function(err) {
    return process.send({
      type: 'failed',
      task: task.id,
      error: err
    });
  });
});
