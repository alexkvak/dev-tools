// Generated by CoffeeScript 1.6.3
var Optimizer, ProjectBuilder, ServerProcessManager, cliParser, handleChdir, normalizeBuildOptions, normalizeServerOptions, rmrf, _;

_ = require('underscore');

rmrf = require('./utils/rmrf');

cliParser = require('./cli-parser');

Optimizer = require('./optimizer/Optimizer');

ProjectBuilder = require('./build/ProjectBuilder');

ServerProcessManager = require('./server/ServerProcessManager');

exports.main = function() {
  /*
  Main cordjs CLI tool entry point.
  */

  return cliParser.run({
    build: function(options) {
      /*
      Builds whole project.
      */

      var builder;
      console.log("Building project with options", options);
      handleChdir(options);
      builder = new ProjectBuilder(normalizeBuildOptions(options));
      return builder.build();
    },
    run: function(options) {
      /*
      Builds project and starts cordjs server
      */

      var buildOptions, builder, serverOptions, serverProcessManager;
      handleChdir(options);
      buildOptions = normalizeBuildOptions(options);
      builder = new ProjectBuilder(buildOptions);
      builder.build();
      serverOptions = normalizeServerOptions(options);
      serverProcessManager = new ServerProcessManager(_.extend(buildOptions, serverOptions));
      return builder.on('complete', function() {
        console.log("build complete. restarting...");
        return serverProcessManager.restart();
      });
    },
    optimize: function(options) {
      var optimizer;
      handleChdir(options);
      optimizer = new Optimizer({
        targetDir: "" + (process.cwd()) + "/" + options.out
      });
      return optimizer.run();
    },
    clean: function(options) {
      console.log("Cleaning project...");
      handleChdir(options);
      return rmrf(normalizeBuildOptions(options).targetDir);
    }
  });
};

handleChdir = function(options) {
  if (options.parent.chdir) {
    return process.chdir(options.parent.chdir);
  }
};

normalizeBuildOptions = function(options) {
  var curDir;
  curDir = process.cwd();
  return {
    baseDir: curDir,
    targetDir: "" + curDir + "/" + (options.out ? options.out : 'target'),
    watch: !!options.watch,
    debug: !!options.debug
  };
};

normalizeServerOptions = function(options) {
  return {
    config: options.config,
    port: parseInt(options.port)
  };
};
