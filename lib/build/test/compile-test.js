// Generated by CoffeeScript 1.7.1
var CompileTestSpec, should;

should = require('should');

CompileTestSpec = require('../task/CompileTestSpec');

describe('Test compiler check', function() {
  var compileTest, definePathString;
  compileTest = new CompileTestSpec;
  definePathString = "definePath(__filename)";
  it('Checks simple case, which consists of it with describe message without done argument', function() {
    var coffeeScript;
    coffeeScript = "describe 'One test, one touch', ->\n  it 'should test something', ->\n    nextCall()";
    return compileTest.preCompilerCallback(coffeeScript).should.equal("" + definePathString + "\ndescribe 'One test, one touch', ->\n  it 'should test something', ->\n\n    " + definePathString + "\n    nextCall()");
  });
  it('Checks case, which consists of it with describe message with done argument', function() {
    var coffeeScript;
    coffeeScript = "describe 'One test, one touch', ->\n  it 'should test something and executes callback', (done) ->\n    nextCall()";
    return compileTest.preCompilerCallback(coffeeScript).should.equal("" + definePathString + "\ndescribe 'One test, one touch', ->\n  it 'should test something and executes callback', (done) ->\n\n    " + definePathString + "\n    nextCall()");
  });
  it('Checks test-suite with multiple it-blocks', function() {
    var coffeeScript;
    coffeeScript = "describe 'Two tests, two touches', ->\n  it 'should test first case', (done) ->\n    firstCall()\n\n\n  it 'should test second case', ->\n    secondCall()";
    return compileTest.preCompilerCallback(coffeeScript).should.equal("" + definePathString + "\ndescribe 'Two tests, two touches', ->\n  it 'should test first case', (done) ->\n\n    " + definePathString + "\n    firstCall()\n\n\n  it 'should test second case', ->\n\n    " + definePathString + "\n    secondCall()");
  });
  return it('should test script with random it-letters in it', function() {
    var coffeeScript;
    coffeeScript = "describe 'It is simple test with it ', ->\n  it 'should call it or not call it', ->\n    itCallback(' it argument ->')";
    return compileTest.preCompilerCallback(coffeeScript).should.equal("" + definePathString + "\ndescribe 'It is simple test with it ', ->\n  it 'should call it or not call it', ->\n\n    " + definePathString + "\n    itCallback(' it argument ->')");
  });
});
