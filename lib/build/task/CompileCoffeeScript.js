// Generated by CoffeeScript 1.6.3
var BuildTask, CompileCoffeeScript, Future, coffee, fs, mkdirp, path, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

coffee = require('coffee-script');

mkdirp = require('mkdirp');

Future = require('../../utils/Future').Future;

BuildTask = require('./BuildTask').BuildTask;

CompileCoffeeScript = (function(_super) {
  __extends(CompileCoffeeScript, _super);

  function CompileCoffeeScript() {
    _ref = CompileCoffeeScript.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CompileCoffeeScript.prototype.run = function() {
    var basename, dirname, dst, f, src,
      _this = this;
    dirname = path.dirname(this.params.file);
    basename = path.basename(this.params.file, '.coffee');
    src = "" + this.params.baseDir + "/" + this.params.file;
    dst = "" + this.params.targetDir + "/" + dirname + "/" + basename + ".js";
    f = Future.call(fs.readFile, src, 'utf8').map(function(coffeeString) {
      return coffee.compile(coffeeString, {
        compile: true,
        bare: true
      });
    }).zip(Future.call(mkdirp, path.dirname(dst))).flatMap(function(jsString) {
      return Future.call(fs.writeFile, dst, jsString);
    }).failAloud();
    return this.readyPromise.when(f);
  };

  CompileCoffeeScript.prototype.getWorkload = function() {
    return 1;
  };

  return CompileCoffeeScript;

})(BuildTask);

exports.CompileCoffeeScript = CompileCoffeeScript;
