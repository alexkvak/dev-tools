// Generated by CoffeeScript 1.3.3
var createDir, exec, fs, generator, path, projectGenerator, sendCommand, spawn, sys, util, _ref,
  __slice = [].slice;

fs = require('fs');

util = require('util');

path = require('path');

sys = require('sys');

_ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;

exports.VERSION = '0.0.1';

generator = {
  collection: {},
  addGenerator: function(name, callback) {
    return this.collection[name] = callback;
  },
  exists: function(name) {
    return !!this.collection[name];
  },
  init: function() {
    return this.addGenerator('project', projectGenerator);
  },
  "do": function() {
    var args, name, _ref1;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return (_ref1 = this.collection)[name].apply(_ref1, args);
  }
};

projectGenerator = function(command, args) {
  switch (command) {
    case "create":
      console.log('Cloning based project layout...');
      return sendCommand("git clone https://github.com/cordjs/cordjs.git .", function() {
        createDir('public/bundles/cord');
        createDir('public/bundles/cord/core');
        console.log('Cloning core...');
        return sendCommand("git clone https://github.com/cordjs/core.git public/bundles/cord/core");
      });
    case "update":
      return sendCommand("git pull");
  }
};

generator.init();

exports.generator = generator;

createDir = function(dir) {
  var pathDir, root;
  root = process.cwd();
  pathDir = path.join(root, dir);
  if (!fs.existsSync(pathDir)) {
    fs.mkdirSync(path.join(root, dir), '0755');
    return console.log('Create directory: ', dir);
  }
};

sendCommand = function(command, callback) {
  return exec(command, function(error, stdout, stderr) {
    if (error) {
      console.log("" + error);
    } else {
      if (stdout) {
        console.log(stdout);
      }
    }
    return typeof callback === "function" ? callback.apply(null, arguments) : void 0;
  });
};
