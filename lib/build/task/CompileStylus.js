// Generated by CoffeeScript 1.6.3
var BuildTask, CompileStylus, Future, fs, mkdirp, nib, path, pathToCore, pathUtils, replaceImportRe, stylus, stylusLib, _pathUtils, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

path = require('path');

mkdirp = require('mkdirp');

stylus = require('stylus');

nib = require('nib');

Future = require('../../utils/Future');

BuildTask = require('./BuildTask');

pathToCore = 'bundles/cord/core';

stylusLib = function(style) {
  style.define('url', stylus.url());
  style.use(nib());
  return style["import"]('nib');
};

replaceImportRe = /^@import ['"](.*\/\/.+)['"]$/gm;

_pathUtils = null;

pathUtils = function(baseDir) {
  /*
  Lazy val
  */

  if (_pathUtils == null) {
    _pathUtils = require("" + (path.join(baseDir, 'public', pathToCore)) + "/requirejs/pathUtils");
  }
  return _pathUtils;
};

CompileStylus = (function(_super) {
  __extends(CompileStylus, _super);

  function CompileStylus() {
    _ref = CompileStylus.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CompileStylus.totalPreprocessTime = [0, 0];

  CompileStylus.prototype.run = function() {
    var basename, dirname, dst, f, src,
      _this = this;
    dirname = path.dirname(this.params.file);
    basename = path.basename(this.params.file, '.styl');
    src = "" + this.params.baseDir + "/" + this.params.file;
    dst = "" + this.params.targetDir + "/" + dirname + "/" + basename + ".css";
    f = Future.call(fs.readFile, src, 'utf8').flatMap(function(stylusStr) {
      var preprocessedStr, pu, styl;
      pu = pathUtils(_this.params.baseDir);
      preprocessedStr = stylusStr.replace(replaceImportRe, function(match, p1) {
        return "@import '" + (pu.convertCssPath(p1, src)) + "'";
      });
      styl = stylus(preprocessedStr).set('filename', src).set('compress', true).include(_this.params.baseDir).use(stylusLib);
      return Future.call([styl, 'render']);
    }).zip(Future.call(mkdirp, path.dirname(dst))).flatMap(function(cssStr) {
      return Future.call(fs.writeFile, dst, cssStr);
    }).failAloud();
    return this.readyPromise.when(f);
  };

  return CompileStylus;

})(BuildTask);

module.exports = CompileStylus;
