// Generated by CoffeeScript 1.3.3
var CoffeeScript, Cordjs, EventEmitter, compile, fs, helpers, printLine, printWarn;

fs = require('fs');

Cordjs = require('./cordjs');

CoffeeScript = require('../../node_modules/coffee-script/lib/coffee-script/coffee-script');

helpers = require('../../node_modules/coffee-script/lib/coffee-script/helpers');

EventEmitter = require('events').EventEmitter;

helpers.extend(CoffeeScript, new EventEmitter);

compile = function(source, base, options, callback) {
  var _this = this;
  return fs.readFile(source, function(err, code) {
    var output, string, t, task;
    if (err && err.code !== 'ENOENT') {
      throw err;
    }
    if ((err != null ? err.code : void 0) === 'ENOENT') {
      return typeof callback === "function" ? callback() : void 0;
    }
    string = code.toString();
    output = '';
    try {
      t = task = {
        source: source,
        string: string,
        options: options
      };
      CoffeeScript.emit('compile', task);
      output = CoffeeScript.compile(t.string, {
        compile: true,
        bare: true
      });
      CoffeeScript.emit('success', task);
    } catch (err) {
      Cordjs.utils.timeLogError("CoffeScript: " + source);
      CoffeeScript.emit('failure', err, task);
      if (options.watch) {
        printLine(err.message + '\x07');
      }
      printLine(err instanceof Error && err.stack || ("ERROR: " + err));
    }
    output = output.length <= 0 ? ' ' : output;
    return typeof callback === "function" ? callback(output) : void 0;
  });
};

exports.CoffeeScript = CoffeeScript;

exports.compile = compile;

printLine = function(line) {
  return process.stdout.write(line + '\n');
};

printWarn = function(line) {
  return process.stderr.write(line + '\n');
};
