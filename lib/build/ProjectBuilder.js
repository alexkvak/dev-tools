// Generated by CoffeeScript 1.6.3
var EventEmitter, Future, ProjectBuilder, buildManager, inWidgetsDir, isCoffee, isStylus, isWidgetClass, isWidgetTemplate, path, requirejs, walk,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

requirejs = require('requirejs');

walk = require('walk');

EventEmitter = require('events').EventEmitter;

Future = require('../utils/Future').Future;

buildManager = require('./BuildManager').buildManager;

ProjectBuilder = (function(_super) {
  __extends(ProjectBuilder, _super);

  /*
  Builds the whole cordjs application project
  */


  function ProjectBuilder(params) {
    this.params = params;
    console.log("build params", this.params);
  }

  ProjectBuilder.prototype.build = function() {
    var appConfFile, appConfPromise, completePromise, corePromise, pathUtilsPromise, relativePos, scanBundle, scanCore, scanDir, scanRegularDir, start, widgetClassesPromise,
      _this = this;
    console.log("building project...");
    start = process.hrtime();
    completePromise = new Future(1);
    corePromise = new Future(1);
    widgetClassesPromise = new Future(1);
    relativePos = this.params.baseDir.length + 1;
    scanDir = function(dir, payloadCallback) {
      var walker,
        _this = this;
      completePromise.fork();
      walker = walk.walk(dir);
      walker.on('file', function(root, stat, next) {
        var relativeDir;
        if (root.indexOf('.git') < 0 && stat.name.indexOf('.git') < 0 && root.indexOf('.hg') < 0 && stat.name.indexOf('.hg') < 0) {
          relativeDir = root.substr(relativePos);
          payloadCallback("" + relativeDir + "/" + stat.name, stat);
        }
        return setTimeout(next, 0);
      });
      walker.on('end', function() {
        console.log("walker for dir " + dir + " completed!");
        return completePromise.resolve();
      });
      return walker;
    };
    scanRegularDir = function(dir) {
      return scanDir(dir, function(relativeName) {
        return completePromise.when(buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir));
      });
    };
    scanCore = function() {
      return scanDir("" + _this.params.baseDir + "/public/bundles/cord/core", function(relativeName) {
        var task;
        if (inWidgetsDir(relativeName)) {
          return completePromise.when(corePromise.flatMap(function() {
            return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir);
          }));
        } else {
          task = buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir);
          corePromise.when(task);
          return completePromise.when(task);
        }
      }).on('end', function() {
        return corePromise.resolve();
      });
    };
    scanBundle = function(bundle) {
      widgetClassesPromise.fork();
      return scanDir("" + _this.params.baseDir + "/public/bundles/" + bundle, function(relativeName) {
        var task;
        if (isWidgetClass(relativeName, bundle)) {
          task = corePromise.flatMap(function() {
            return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir);
          });
          completePromise.when(task);
          return widgetClassesPromise.when(task);
        } else if (isWidgetTemplate(relativeName, bundle)) {
          return widgetClassesPromise.flatMap(function() {
            return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir);
          }).link(completePromise);
        } else if (isStylus(relativeName)) {
          return pathUtilsPromise.flatMap(function() {
            return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir);
          }).link(completePromise);
        } else {
          return buildManager.createTask(relativeName, _this.params.baseDir, _this.params.targetDir).link(completePromise);
        }
      }).on('end', function() {
        return widgetClassesPromise.resolve();
      });
    };
    appConfFile = 'public/app/application';
    appConfPromise = buildManager.createTask("" + appConfFile + ".coffee", this.params.baseDir, this.params.targetDir);
    pathUtilsPromise = buildManager.createTask('public/bundles/cord/core/requirejs/pathUtils.coffee', this.params.baseDir, this.params.targetDir);
    scanRegularDir(this.params.baseDir + '/public/vendor');
    scanRegularDir(this.params.baseDir + '/conf');
    completePromise.when(buildManager.createTask("server.coffee", this.params.baseDir, this.params.targetDir));
    appConfPromise.done(function() {
      scanCore();
      requirejs.config({
        baseUrl: _this.params.targetDir
      });
      return requirejs([appConfFile], function(bundles) {
        var bundle, _i, _len;
        for (_i = 0, _len = bundles.length; _i < _len; _i++) {
          bundle = bundles[_i];
          scanBundle(bundle);
        }
        widgetClassesPromise.resolve();
        return completePromise.resolve();
      });
    });
    completePromise.done(function() {
      var diff;
      diff = process.hrtime(start);
      console.log("Build complete in " + ((diff[0] * 1e9 + diff[1]) / 1e6) + " ms");
      return buildManager.stop();
    });
    return this;
  };

  return ProjectBuilder;

})(EventEmitter);

inWidgetsDir = function(file) {
  return /public\/bundles\/.+\/widgets\//.test(file);
};

isWidgetClass = function(file, bundle) {
  var base, dir, ext, name;
  ext = path.extname(file);
  if (ext = '.coffee') {
    if (file.indexOf("public/bundles/" + bundle + "/widgets/") === 0) {
      base = path.basename(file);
      name = base.slice(0, -ext.length);
      dir = file.substr(-(base.length + name.length + 1), name.length);
      dir = dir.charAt(0).toUpperCase() + dir.slice(1);
      return dir === name;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

isCoffee = function(file) {
  return path.extname(file) === '.coffee';
};

isStylus = function(file) {
  return path.extname(file) === '.styl';
};

isWidgetTemplate = function(file, bundle) {
  var base, dir, ext, name;
  ext = path.extname(file);
  if (ext = '.html') {
    if (file.indexOf("public/bundles/" + bundle + "/widgets/") === 0) {
      base = path.basename(file);
      name = base.slice(0, -ext.length);
      dir = file.substr(-(base.length + name.length + 1), name.length);
      return dir === name;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

exports.ProjectBuilder = ProjectBuilder;
