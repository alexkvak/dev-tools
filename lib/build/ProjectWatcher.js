// Generated by CoffeeScript 1.6.3
var EventEmitter, ProjectWatcher, fs, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

path = require('path');

fs = require('fs');

_ = require('underscore');

EventEmitter = require('events').EventEmitter;

ProjectWatcher = (function(_super) {
  __extends(ProjectWatcher, _super);

  /*
  Directory tree watcher wrapper.
  Emits aggregated 'change' event when some watched files/directories are added/removed/moved
  */


  ProjectWatcher._watchTree = null;

  ProjectWatcher._fileByInode = null;

  ProjectWatcher._inodeByFile = null;

  ProjectWatcher._changedItems = null;

  ProjectWatcher._removedItems = null;

  ProjectWatcher._emitTimeout = null;

  function ProjectWatcher(baseDir) {
    var rootInfo,
      _this = this;
    this.baseDir = baseDir;
    rootInfo = {
      dir: this.baseDir,
      watchAll: false,
      children: {},
      watcher: fs.watch(this.baseDir, function(event, filename) {
        return _this._handleDir(rootInfo, filename, event);
      })
    };
    this._watchTree = rootInfo;
    this._fileByInode = {};
    this._inodeByFile = {};
    this._changedItems = {};
    this._removedItems = {};
  }

  ProjectWatcher.prototype.addDir = function(dir, stat) {
    var curParent, part, parts, _i, _len;
    if (dir.indexOf(this.baseDir) === 0) {
      if (stat != null) {
        this._registerInode(dir, stat.ino);
      }
      parts = dir.substr(this.baseDir.length).split(path.sep);
      parts = _.compact(parts);
      curParent = this._watchTree;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        curParent = this._watchDir(curParent, part);
      }
      return curParent.watchAll = true;
    } else {
      throw new Error("Watch directory " + dir + " must be sub-directory of base dir " + this.baseDir + "!");
    }
  };

  ProjectWatcher.prototype.registerFile = function(file, stat) {
    return this._registerInode(file, stat.ino);
  };

  ProjectWatcher.prototype._registerInode = function(file, inode) {
    if ((this._inodeByFile[file] != null) && inode !== this._inodeByFile[file]) {
      delete this._fileByInode[this._inodeByFile[file]];
    }
    if ((this._fileByInode[inode] != null) && file !== this._fileByInode[inode]) {
      delete this._inodeByFile[this._fileByInode[inode]];
    }
    this._fileByInode[inode] = file;
    return this._inodeByFile[file] = inode;
  };

  ProjectWatcher.prototype._watchDir = function(parentInfo, localName) {
    var dir, watchInfo,
      _this = this;
    if (parentInfo.children[localName] != null) {
      return parentInfo.children[localName];
    } else {
      dir = path.join(parentInfo.dir, localName);
      watchInfo = {
        dir: dir,
        watchAll: false,
        children: {},
        watcher: fs.watch(dir, function(event, filename) {
          return _this._handleDir(watchInfo, filename, event);
        })
      };
      parentInfo.children[localName] = watchInfo;
      return watchInfo;
    }
  };

  ProjectWatcher.prototype._handleDir = function(watchInfo, filename, event) {
    var fullName,
      _this = this;
    if (filename != null) {
      console.log("watch event", event, filename);
      fullName = path.join(watchInfo.dir, filename);
      return fs.lstat(fullName, function(err, stat) {
        var oldName;
        if (err) {
          if (err.code === 'ENOENT') {
            return _this._addRemoveItem(watchInfo, fullName);
          } else {
            return console.error("stat error", err);
          }
        } else {
          if ((oldName = _this._fileByInode[stat.ino]) != null) {
            if (oldName === fullName) {
              return _this._addChangeItem(watchInfo, fullName, stat);
            } else {
              _this._addChangeItem(watchInfo, fullName, stat);
              _this._addRemoveItem(watchInfo, oldName);
              return _this._registerInode(fullName, stat.ino);
            }
          } else {
            _this._addChangeItem(watchInfo, fullName, stat);
            return _this._registerInode(fullName, stat.ino);
          }
        }
      });
    } else {
      throw new Error("Filename is not supported in watch: " + (JSON.stringify(watchInfo)) + "!");
    }
  };

  ProjectWatcher.prototype._addChangeItem = function(watchInfo, name, stat) {
    var localName;
    localName = path.basename(name);
    if (watchInfo.watchAll || (watchInfo.children[localName] != null)) {
      this._changedItems[name] = stat;
      if (this._removedItems[name] != null) {
        delete this._removedItems[name];
      }
      return this._activateEmitTimeout();
    }
  };

  ProjectWatcher.prototype._addRemoveItem = function(watchInfo, name) {
    var localName;
    localName = path.basename(name);
    if (watchInfo.watchAll || (watchInfo.children[localName] != null)) {
      this._removedItems[name] = true;
      if (this._changedItems[name] != null) {
        delete this._changedItems[name];
      }
      this._activateEmitTimeout();
      if ((watchInfo.children[localName] != null) && (watchInfo.children[localName].watcher != null)) {
        return this._stopWatching(watchInfo.children[localName]);
      }
    }
  };

  ProjectWatcher.prototype._activateEmitTimeout = function() {
    var _this = this;
    if (this._emitTimeout != null) {
      clearTimeout(this._emitTimeout);
    }
    return this._emitTimeout = setTimeout(function() {
      var name, removeList;
      if (Object.keys(_this._removedItems).length > 0 || Object.keys(_this._changedItems).length > 0) {
        removeList = [];
        for (name in _this._removedItems) {
          removeList.push(name);
        }
        _this.emit('change', {
          removed: removeList,
          changed: _this._changedItems
        });
        _this._removedItems = {};
        _this._changedItems = {};
        return _this._emitTimeout = null;
      }
    }, 100);
  };

  ProjectWatcher.prototype._stopWatching = function(watchInfo) {
    var child, name, _ref, _ref1;
    if ((_ref = watchInfo.watcher) != null) {
      _ref.close();
    }
    watchInfo.watcher = null;
    _ref1 = watchInfo.children;
    for (name in _ref1) {
      child = _ref1[name];
      this._stopWatching(child);
    }
    return watchInfo.children = {};
  };

  return ProjectWatcher;

})(EventEmitter);

module.exports = ProjectWatcher;
